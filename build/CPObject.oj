{"LOG":[],"sourceFile":"../Frameworks/Foundation/CPObject.j","objectFile":"../build/CPObject.oj","code":"// @import \"CPObjJRuntime.j\"\n\n// @implementation CPObject\nvar $the_class = objj_allocateClassPair(Nil, \"CPObject\");\nobjj_registerClassPair($the_class);\n\nclass_addIvars($the_class,\n[\n    new objj_ivar(\"isa\", \"id\")\n]);\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (CPString)className\n    new objj_method(sel_getUid(\"className\"),\n    function $CPObject__className(self, _cmd)\n    {\n        return self.isa.name;\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (BOOL)isKindOfClass:\n    new objj_method(sel_getUid(\"isKindOfClass:\"),\n    function $CPObject__isKindOfClass_(self, _cmd, aClass)\n    {\n        return /* isSubclassOfClass: aClass];\n}\n\n */ ((___r1 = self.isa), ___r1 == null ? null : ___r1.isa.objj_msgSend1(___r1, \"isSubclassOfClass:\", aClass));\n\n        // Generated receiver temp variables\n        var ___r1;\n    },\n    // argument types\n    [\"BOOL\", \"Class\"]),\n\n    // - (id)init\n    new objj_method(sel_getUid(\"init\"),\n    function $CPObject__init(self, _cmd)\n    {\n        return self;\n    },\n    // argument types\n    [\"id\"]),\n\n    // - (BOOL)respondsToSelector:\n    new objj_method(sel_getUid(\"respondsToSelector:\"),\n    function $CPObject__respondsToSelector_(self, _cmd, aSelector)\n    {\n        return !!class_getInstanceMethod(self.isa, aSelector);\n    },\n    // argument types\n    [\"BOOL\", \"SEL\"]),\n\n    // - (unsigned)hash\n    new objj_method(sel_getUid(\"hash\"),\n    function $CPObject__hash(self, _cmd)\n    {\n        return /*  UID];\n}\n\n */ self.isa.objj_msgSend0(self, \"UID\");\n    },\n    // argument types\n    [\"unsigned\"]),\n\n    // - (CPString)UID\n    new objj_method(sel_getUid(\"UID\"),\n    function $CPObject__UID(self, _cmd)\n    {\n        if (typeof self._UID === \"undefined\")\n            self._UID = objj_generateObjectUID();\n\n        return self._UID + \"\";\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPString)description\n    new objj_method(sel_getUid(\"description\"),\n    function $CPObject__description(self, _cmd)\n    {\n        return \"<\" + class_getName(self.isa) + \" 0x\" + /* ring stringWithHash: [self UID]] + \"> */ (CPString == null ? null : CPString.isa.objj_msgSend1(CPString, \"stringWithHash:\", self.isa.objj_msgSend0(self, \"UID\"))) + \">\";\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (id)performSelector:\n    new objj_method(sel_getUid(\"performSelector:\"),\n    function $CPObject__performSelector_(self, _cmd, aSelector)\n    {\n        return self.isa.objj_msgSend0(self, aSelector);\n    },\n    // argument types\n    [\"id\", \"SEL\"]),\n\n    // - (id)performSelector:withObject:\n    new objj_method(sel_getUid(\"performSelector:withObject:\"),\n    function $CPObject__performSelector_withObject_(self, _cmd, aSelector, anObject)\n    {\n        return self.isa.objj_msgSend1(self, aSelector, anObject);\n    },\n    // argument types\n    [\"id\", \"SEL\", \"id\"]),\n\n    // - (id)performSelector:withObject:withObject:\n    new objj_method(sel_getUid(\"performSelector:withObject:withObject:\"),\n    function $CPObject__performSelector_withObject_withObject_(self, _cmd, aSelector, anObject, anotherObject)\n    {\n        return self.isa.objj_msgSend2(self, aSelector, anObject, anotherObject);\n    },\n    // argument types\n    [\"id\", \"SEL\", \"id\", \"id\"]),\n\n    // - (id)performSelector:withObjects:\n    new objj_method(sel_getUid(\"performSelector:withObjects:\"),\n    function $CPObject__performSelector_withObjects_(self, _cmd, aSelector, anObject)\n    {\n        var params = [self, aSelector].concat(Array.prototype.slice.apply(arguments, [3]));\n\n        return objj_msgSend.apply(this, params);\n    },\n    // argument types\n    [\"id\", \"SEL\", \"id\"]),\n\n    // - (id)forwardingTargetForSelector:\n    new objj_method(sel_getUid(\"forwardingTargetForSelector:\"),\n    function $CPObject__forwardingTargetForSelector_(self, _cmd, aSelector)\n    {\n        return nil;\n    },\n    // argument types\n    [\"id\", \"SEL\"]),\n\n    // - (void)forwardInvocation:\n    new objj_method(sel_getUid(\"forwardInvocation:\"),\n    function $CPObject__forwardInvocation_(self, _cmd, anInvocation)\n    {\n        /*  doesNotRecognizeSelector: [anInvocation selector]];\n}\n\n */ self.isa.objj_msgSend1(self, \"doesNotRecognizeSelector:\", (anInvocation == null ? null : anInvocation.isa.objj_msgSend0(anInvocation, \"selector\")));\n    },\n    // argument types\n    [\"void\", \"CPInvocation\"]),\n\n    // - (BOOL)doesNotRecognizeSelector:\n    new objj_method(sel_getUid(\"doesNotRecognizeSelector:\"),\n    function $CPObject__doesNotRecognizeSelector_(self, _cmd, aSelector)\n    {\n        throw new Error((class_isMetaClass(self.isa) ? \"+\" : \"-\") + \" [\" + /* className] + \" \" */ self.isa.objj_msgSend0(self, \"className\") + \" \" + aSelector + \"] unrecognized selector sent to \" + (class_isMetaClass(self.isa) ? \"class \" + class_getName(self.isa) : \"instance \" + /* UID]));\n}\n */ self.isa.objj_msgSend0(self, \"UID\")));\n    },\n    // argument types\n    [\"BOOL\", \"SEL\"]),\n\n    // - (BOOL)isEqual:\n    new objj_method(sel_getUid(\"isEqual:\"),\n    function $CPObject__isEqual_(self, _cmd, anObject)\n    {\n        return self === anObject || /* UID] === [ */ self.isa.objj_msgSend0(self, \"UID\") === /* ect UID];\n}\n\n/ */ (anObject == null ? null : anObject.isa.objj_msgSend0(anObject, \"UID\"));\n    },\n    // argument types\n    [\"BOOL\", \"id\"]),\n\n    // - (Class)_superclass\n    new objj_method(sel_getUid(\"_superclass\"),\n    function $CPObject___superclass(self, _cmd)\n    {\n        return self.isa._super_class;\n    },\n    // argument types\n    [\"Class\"])\n]);\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (id)alloc\n    new objj_method(sel_getUid(\"alloc\"),\n    function $CPObject__alloc(self, _cmd)\n    {\n        return class_createInstance(self);\n    },\n    // argument types\n    [\"id\"]),\n\n    // + (id)new\n    new objj_method(sel_getUid(\"new\"),\n    function $CPObject__new(self, _cmd)\n    {\n        return /* [self alloc] init]; */ ((___r1 = self.isa.objj_msgSend0(self, \"alloc\")), ___r1 == null ? null : ___r1.isa.objj_msgSend0(___r1, \"init\"));\n\n        // Generated receiver temp variables\n        var ___r1;\n    },\n    // argument types\n    [\"id\"]),\n\n    // + (void)initialize\n    new objj_method(sel_getUid(\"initialize\"),\n    function $CPObject__initialize(self, _cmd)\n    {\n    },\n    // argument types\n    [\"void\"]),\n\n    // + (Class)class\n    new objj_method(sel_getUid(\"class\"),\n    function $CPObject__class(self, _cmd)\n    {\n        return self;\n    },\n    // argument types\n    [\"Class\"]),\n\n    // + (Class)_superclass\n    new objj_method(sel_getUid(\"_superclass\"),\n    function $CPObject___superclass(self, _cmd)\n    {\n        return class_getSuperclass(self);\n    },\n    // argument types\n    [\"Class\"]),\n\n    // + (BOOL)isSubclassOfClass:\n    new objj_method(sel_getUid(\"isSubclassOfClass:\"),\n    function $CPObject__isSubclassOfClass_(self, _cmd, aClass)\n    {\n        var theClass = self;\n\n        for (; theClass; theClass = theClass._super_class)\n            if (theClass === aClass)\n                return YES;\n\n        return NO;\n    },\n    // argument types\n    [\"BOOL\", \"Class\"]),\n\n    // + (BOOL)isKindOfClass:\n    new objj_method(sel_getUid(\"isKindOfClass:\"),\n    function $CPObject__isKindOfClass_(self, _cmd, aClass)\n    {\n        return /*  isSubclassOfClass: aClass];\n}\n\n */ self.isa.objj_msgSend1(self, \"isSubclassOfClass:\", aClass);\n    },\n    // argument types\n    [\"BOOL\", \"Class\"]),\n\n    // + (CPString)description\n    new objj_method(sel_getUid(\"description\"),\n    function $CPObject__description(self, _cmd)\n    {\n        return class_getName(self.isa);\n    },\n    // argument types\n    [\"CPString\"])\n]);\n// @end: @implementation CPObject\n","superclassRefs":[],"classDefs":["CPObject"],"dependencies":["CPObjJRuntime.j"]}