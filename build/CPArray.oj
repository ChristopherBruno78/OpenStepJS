{"LOG":[],"sourceFile":"../Frameworks/Foundation/CPArray.j","objectFile":"../build/CPArray.oj","code":"// @import \"CPObject.j\"\n\n// @import \"CPRange.j\"\n\nvar concat = Array.prototype.concat,\n    indexOf = Array.prototype.indexOf,\n    join = Array.prototype.join,\n    pop = Array.prototype.pop,\n    push = Array.prototype.push,\n    slice = Array.prototype.slice,\n    splice = Array.prototype.splice;\n\n// @implementation CPArray : CPObject\nvar $the_class = objj_allocateClassPair(CPObject, \"CPArray\");\nobjj_registerClassPair($the_class);\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (id)initWithObjects:\n    new objj_method(sel_getUid(\"initWithObjects:\"),\n    function $CPArray__initWithObjects_(self, _cmd, anObject)\n    {\n        var index = 2,\n            count = arguments.length;\n\n        for (; index < count; ++index)\n            if (arguments[index] == nil)\n                break;\n\n        return slice.call(arguments, 2, index);\n    },\n    // argument types\n    [\"id\", \"id\"]),\n\n    // - (CPUInteger)count\n    new objj_method(sel_getUid(\"count\"),\n    function $CPArray__count(self, _cmd)\n    {\n        return self.length;\n    },\n    // argument types\n    [\"CPUInteger\"]),\n\n    // - (id)objectAtIndex:\n    new objj_method(sel_getUid(\"objectAtIndex:\"),\n    function $CPArray__objectAtIndex_(self, _cmd, anIndex)\n    {\n        if (anIndex >= self.length || anIndex < 0)\n            throw new Error(\"CPArray out or range\");\n\n        return self[anIndex];\n    },\n    // argument types\n    [\"id\", \"CPUInteger\"]),\n\n    // - (CPUInteger)indexOfObject:inRange:\n    new objj_method(sel_getUid(\"indexOfObject:inRange:\"),\n    function $CPArray__indexOfObject_inRange_(self, _cmd, anObject, aRange)\n    {\n        if (anObject && anObject.isa)\n        {\n            var index = aRange ? aRange.location : 0,\n                count = aRange ? CPMaxRange(aRange) : self.length;\n\n            for (; index < count; ++index)\n                if (/* [self[index] isEqual:anObject] */ ((___r1 = self[index]), ___r1 == null ? null : ___r1.isa.objj_msgSend1(___r1, \"isEqual:\", anObject)))\n                    return index;\n\n            return CPNotFound;\n        }\n\n        return /* [self indexOfObjectIdenticalTo:anObject inRange:aRange] */ self.isa.objj_msgSend2(self, \"indexOfObjectIdenticalTo:inRange:\", anObject, aRange);\n\n        // Generated receiver temp variables\n        var ___r1;\n    },\n    // argument types\n    [\"CPUInteger\", \"id\", \"CPRange\"]),\n\n    // - (CPUInteger)indexOfObjectIdenticalTo:inRange:\n    new objj_method(sel_getUid(\"indexOfObjectIdenticalTo:inRange:\"),\n    function $CPArray__indexOfObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)\n    {\n        if (indexOf && !aRange)\n            return indexOf.call(self, anObject);\n\n        var index = aRange ? aRange.location : 0,\n            count = aRange ? CPMaxRange(aRange) : self.length;\n\n        for (; index < count; ++index)\n            if (self[index] === anObject)\n                return index;\n\n        return CPNotFound;\n    },\n    // argument types\n    [\"CPUInteger\", \"id\", \"CPRange\"]),\n\n    // - (void)insertObject:atIndex:\n    new objj_method(sel_getUid(\"insertObject:atIndex:\"),\n    function $CPArray__insertObject_atIndex_(self, _cmd, anObject, anIndex)\n    {\n        if (anIndex > self.length || anIndex < 0)\n            throw new Error(\"CPArray out or range\");\n\n        splice.call(self, anIndex, 0, anObject);\n    },\n    // argument types\n    [\"void\", \"id\", \"CPUInteger\"]),\n\n    // - (void)removeObjectAtIndex:\n    new objj_method(sel_getUid(\"removeObjectAtIndex:\"),\n    function $CPArray__removeObjectAtIndex_(self, _cmd, anIndex)\n    {\n        if (anIndex >= self.length || anIndex < 0)\n            throw new Error(\"CPArray out or range\");\n\n        splice.call(self, anIndex, 1);\n    },\n    // argument types\n    [\"void\", \"CPUInteger\"]),\n\n    // - (void)removeObjectIdenticalTo:\n    new objj_method(sel_getUid(\"removeObjectIdenticalTo:\"),\n    function $CPArray__removeObjectIdenticalTo_(self, _cmd, anObject)\n    {\n        /* [self removeObjectIdenticalTo:anObject inRange:CPMakeRange(0, [self count])] */ self.isa.objj_msgSend2(self, \"removeObjectIdenticalTo:inRange:\", anObject, CPMakeRange(0, self.isa.objj_msgSend0(self, \"count\")));\n    },\n    // argument types\n    [\"void\", \"id\"]),\n\n    // - (void)removeObjectIdenticalTo:inRange:\n    new objj_method(sel_getUid(\"removeObjectIdenticalTo:inRange:\"),\n    function $CPArray__removeObjectIdenticalTo_inRange_(self, _cmd, anObject, aRange)\n    {\n        var index,\n            count = /* [self count] */ self.isa.objj_msgSend0(self, \"count\");\n\n        while ((index = /* [self indexOfObjectIdenticalTo:anObject inRange:aRange] */ self.isa.objj_msgSend2(self, \"indexOfObjectIdenticalTo:inRange:\", anObject, aRange)) !== CPNotFound)\n        {\n            /* [self removeObjectAtIndex:index] */ self.isa.objj_msgSend1(self, \"removeObjectAtIndex:\", index);\n            aRange = CPIntersectionRange(CPMakeRange(index, --count - index), aRange);\n        }\n    },\n    // argument types\n    [\"void\", \"id\", \"CPRange\"]),\n\n    // - (void)removeObjectsInRange:\n    new objj_method(sel_getUid(\"removeObjectsInRange:\"),\n    function $CPArray__removeObjectsInRange_(self, _cmd, aRange)\n    {\n        if (aRange.location < 0 || CPMaxRange(aRange) > self.length)\n            throw new Error(\"CPArray range exception\");\n\n        splice.call(self, aRange.location, aRange.length);\n    },\n    // argument types\n    [\"void\", \"CPRange\"]),\n\n    // - (void)replaceObjectAtIndex:withObject:\n    new objj_method(sel_getUid(\"replaceObjectAtIndex:withObject:\"),\n    function $CPArray__replaceObjectAtIndex_withObject_(self, _cmd, anIndex, anObject)\n    {\n        if (anIndex >= self.length || anIndex < 0)\n            throw new Error(\"CPArray range exception\");\n\n        self[anIndex] = anObject;\n    },\n    // argument types\n    [\"void\", \"CPUInteger\", \"id\"]),\n\n    // - (void)addObject:\n    new objj_method(sel_getUid(\"addObject:\"),\n    function $CPArray__addObject_(self, _cmd, anObject)\n    {\n        push.call(self, anObject);\n    },\n    // argument types\n    [\"void\", \"id\"]),\n\n    // - (void)removeLastObject\n    new objj_method(sel_getUid(\"removeLastObject\"),\n    function $CPArray__removeLastObject(self, _cmd)\n    {\n        pop.call(self);\n    },\n    // argument types\n    [\"void\"]),\n\n    // - (id)copy\n    new objj_method(sel_getUid(\"copy\"),\n    function $CPArray__copy(self, _cmd)\n    {\n        return slice.call(self, 0);\n    },\n    // argument types\n    [\"id\"])\n]);\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (id)alloc\n    new objj_method(sel_getUid(\"alloc\"),\n    function $CPArray__alloc(self, _cmd)\n    {\n        return [];\n    },\n    // argument types\n    [\"id\"])\n]);\n// @end: @implementation CPArray : CPObject\n\nArray.prototype.isa = CPArray;\n","superclassRefs":[{"superclass":"CPObject","class":"CPArray"}],"classDefs":["CPArray"],"dependencies":["CPObject.j","CPRange.j"]}