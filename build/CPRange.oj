{"LOG":[],"sourceFile":"../Frameworks/Foundation/CPRange.j","objectFile":"../build/CPRange.oj","code":"// @typedef CPRange\nobjj_registerTypeDef(objj_allocateTypeDef(\"CPRange\"));\n\nfunction CPMakeRange(location, length)\n{\n    return {\n        location: location,\n        length: length\n    };\n}\n\nfunction CPMakeRangeCopy(aRange)\n{\n    return {\n        location: aRange.location,\n        length: aRange.length\n    };\n}\n\nfunction CPEmptyRange(aRange)\n{\n    return aRange.length === 0;\n}\n\nfunction CPMaxRange(aRange)\n{\n    return aRange.location + aRange.length;\n}\n\nfunction CPEqualRanges(lhsRange, rhsRange)\n{\n    return lhsRange.location === rhsRange.location && lhsRange.length === rhsRange.length;\n}\n\nfunction CPLocationInRange(aLocation, aRange)\n{\n    return aLocation >= aRange.location && aLocation < CPMaxRange(aRange);\n}\n\nfunction CPUnionRange(lhsRange, rhsRange)\n{\n    var location = MIN(lhsRange.location, rhsRange.location);\n\n    return CPMakeRange(location, MAX(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);\n}\n\nfunction CPIntersectionRange(lhsRange, rhsRange)\n{\n    if (CPMaxRange(lhsRange) < rhsRange.location || CPMaxRange(rhsRange) < lhsRange.location)\n        return CPMakeRange(0, 0);\n\n    var location = MAX(lhsRange.location, rhsRange.location);\n\n    return CPMakeRange(location, MIN(CPMaxRange(lhsRange), CPMaxRange(rhsRange)) - location);\n}\n\nfunction CPRangeInRange(lhsRange, rhsRange)\n{\n    return lhsRange.location <= rhsRange.location && CPMaxRange(lhsRange) >= CPMaxRange(rhsRange);\n}\n\nfunction CPStringFromRange(aRange)\n{\n    return \"{\" + aRange.location + \", \" + aRange.length + \"}\";\n}\n\nfunction CPRangeFromString(aString)\n{\n    var comma = aString.indexOf(',');\n\n    return {\n        location: parseInt(aString.substr(1, comma - 1)),\n        length: parseInt(aString.substring(comma + 1, aString.length))\n    };\n}\n","superclassRefs":[],"classDefs":[],"dependencies":[]}