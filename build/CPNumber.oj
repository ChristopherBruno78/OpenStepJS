{"LOG":[],"sourceFile":"../Frameworks/Foundation/CPNumber.j","objectFile":"../build/CPNumber.oj","code":"// @import \"CPNull.j\"\n\n// @import \"CPObject.j\"\n\n// @import \"CPObjJRuntime.j\"\n\nvar CPNumberUIDs = {};\n\n// @implementation CPNumber : CPObject\nvar $the_class = objj_allocateClassPair(CPObject, \"CPNumber\");\nobjj_registerClassPair($the_class);\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (id)initWithBool:\n    new objj_method(sel_getUid(\"initWithBool:\"),\n    function $CPNumber__initWithBool_(self, _cmd, aBoolean)\n    {\n        return aBoolean;\n    },\n    // argument types\n    [\"id\", \"BOOL\"]),\n\n    // - (id)initWithChar:\n    new objj_method(sel_getUid(\"initWithChar:\"),\n    function $CPNumber__initWithChar_(self, _cmd, aChar)\n    {\n        if (aChar.charCodeAt)\n            return aChar.charCodeAt(0);\n\n        return aChar;\n    },\n    // argument types\n    [\"id\", \"char\"]),\n\n    // - (id)initWithDouble:\n    new objj_method(sel_getUid(\"initWithDouble:\"),\n    function $CPNumber__initWithDouble_(self, _cmd, aDouble)\n    {\n        return aDouble;\n    },\n    // argument types\n    [\"id\", \"double\"]),\n\n    // - (id)initWithInt:\n    new objj_method(sel_getUid(\"initWithInt:\"),\n    function $CPNumber__initWithInt_(self, _cmd, anInt)\n    {\n        return anInt;\n    },\n    // argument types\n    [\"id\", \"int\"]),\n\n    // - (CPString)UID\n    new objj_method(sel_getUid(\"UID\"),\n    function $CPNumber__UID(self, _cmd)\n    {\n        var UID = CPNumberUIDs[self];\n\n        if (!UID)\n        {\n            UID = objj_generateObjectUID();\n            CPNumberUIDs[self] = UID;\n        }\n\n        return UID + \"\";\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (BOOL)boolValue\n    new objj_method(sel_getUid(\"boolValue\"),\n    function $CPNumber__boolValue(self, _cmd)\n    {\n        return self ? true : false;\n    },\n    // argument types\n    [\"BOOL\"]),\n\n    // - (char)charValue\n    new objj_method(sel_getUid(\"charValue\"),\n    function $CPNumber__charValue(self, _cmd)\n    {\n        return String.fromCharCode(self);\n    },\n    // argument types\n    [\"char\"]),\n\n    // - (CPComparisonResult)compare:\n    new objj_method(sel_getUid(\"compare:\"),\n    function $CPNumber__compare_(self, _cmd, aNumber)\n    {\n        if (aNumber == nil || aNumber['isa'] === CPNull)\n            throw new Error(\"nil argument\");\n\n        if (self > aNumber)\n            return CPOrderedDescending;\n        else if (self < aNumber)\n            return CPOrderedAscending;\n\n        return CPOrderedSame;\n    },\n    // argument types\n    [\"CPComparisonResult\", \"CPNumber\"]),\n\n    // - (BOOL)isEqualToNumber:\n    new objj_method(sel_getUid(\"isEqualToNumber:\"),\n    function $CPNumber__isEqualToNumber_(self, _cmd, aNumber)\n    {\n        return self == aNumber;\n    },\n    // argument types\n    [\"BOOL\", \"CPNumber\"])\n]);\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (id)alloc\n    new objj_method(sel_getUid(\"alloc\"),\n    function $CPNumber__alloc(self, _cmd)\n    {\n        var result = new Number();\n\n        result.isa = /* [self class] */ self.isa.objj_msgSend0(self, \"class\");\n\n        return result;\n    },\n    // argument types\n    [\"id\"]),\n\n    // + (id)numberWithBool:\n    new objj_method(sel_getUid(\"numberWithBool:\"),\n    function $CPNumber__numberWithBool_(self, _cmd, aBoolean)\n    {\n        return aBoolean ? 1 : 0;\n    },\n    // argument types\n    [\"id\", \"BOOL\"]),\n\n    // + (id)numberWithChar:\n    new objj_method(sel_getUid(\"numberWithChar:\"),\n    function $CPNumber__numberWithChar_(self, _cmd, aChar)\n    {\n        if (aChar.charCodeAt)\n            return aChar.charCodeAt(0);\n\n        return aChar;\n    },\n    // argument types\n    [\"id\", \"char\"]),\n\n    // + (id)numberWithDouble:\n    new objj_method(sel_getUid(\"numberWithDouble:\"),\n    function $CPNumber__numberWithDouble_(self, _cmd, aDouble)\n    {\n        return aDouble;\n    },\n    // argument types\n    [\"id\", \"double\"]),\n\n    // + (id)numberWithFloat:\n    new objj_method(sel_getUid(\"numberWithFloat:\"),\n    function $CPNumber__numberWithFloat_(self, _cmd, aFloat)\n    {\n        return aFloat;\n    },\n    // argument types\n    [\"id\", \"float\"]),\n\n    // + (id)numberWithInt:\n    new objj_method(sel_getUid(\"numberWithInt:\"),\n    function $CPNumber__numberWithInt_(self, _cmd, anInt)\n    {\n        return anInt;\n    },\n    // argument types\n    [\"id\", \"int\"])\n]);\n// @end: @implementation CPNumber : CPObject\n\n// @implementation CPNumber (CPCoding)\nvar $the_class = objj_getClass(\"CPNumber\");\n\nif (!$the_class)\n    throw new ReferenceError(\"Cannot find declaration for class 'CPNumber'\");\n\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (id)initWithCoder:\n    new objj_method(sel_getUid(\"initWithCoder:\"),\n    function $CPNumber__initWithCoder_(self, _cmd, aCoder)\n    {\n        return /* [aCoder decodeObjectForKey: @\"self\"] */ (aCoder == null ? null : aCoder.isa.objj_msgSend1(aCoder, \"decodeObjectForKey:\", \"self\"));\n    },\n    // argument types\n    [\"id\", \"CPCoder\"]),\n\n    // - (void)encodeWithCoder:\n    new objj_method(sel_getUid(\"encodeWithCoder:\"),\n    function $CPNumber__encodeWithCoder_(self, _cmd, aCoder)\n    {\n        /* [aCoder encodeNumber: self forKey: @\"self\"] */ (aCoder == null ? null : aCoder.isa.objj_msgSend2(aCoder, \"encodeNumber:forKey:\", self, \"self\"));\n    },\n    // argument types\n    [\"void\", \"CPCoder\"])\n]);\n// @end: @implementation CPNumber (CPCoding)\n\nNumber.prototype.isa = CPNumber;\nBoolean.prototype.isa = CPNumber;\n/* [CPNumber initialize] */ CPNumber.isa.objj_msgSend0(CPNumber, \"initialize\");\n","superclassRefs":[{"superclass":"CPObject","class":"CPNumber"}],"classDefs":["CPNumber","CPNumber+CPCoding"],"dependencies":["CPNull.j","CPObject.j","CPObjJRuntime.j"]}