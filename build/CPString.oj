{"LOG":[{"severity":"WARNING","message":"local declaration of 'target' hides a method parameter in ../Frameworks/Foundation/CPString.j at (323,9)","sourceFile":"../Frameworks/Foundation/CPString.j"},{"severity":"NOTE","message":"hidden declaration is here in ../Frameworks/Foundation/CPString.j at (317,60)","sourceFile":"../Frameworks/Foundation/CPString.j"}],"sourceFile":"../Frameworks/Foundation/CPString.j","objectFile":"../build/CPString.oj","code":"// @import \"CPObject.j\"\n\nCPCaseInsensitiveSearch = 1;\nCPLiteralSearch = 2;\nCPBackwardsSearch = 4;\nCPAnchoredSearch = 8;\nCPNumericSearch = 64;\nCPDiacriticInsensitiveSearch = 128;\n\nvar CPStringUIDs = {},\n    CPStringRegexSpecialCharacters = [\n        '/',\n        '.',\n        '*',\n        '+',\n        '?',\n        '|',\n        '$',\n        '^',\n        '(',\n        ')',\n        '[',\n        ']',\n        '{',\n        '}',\n        '\\\\'\n    ],\n    CPStringRegexEscapeExpression = new RegExp(\"(\\\\\" + CPStringRegexSpecialCharacters.join(\"|\\\\\") + \")\", 'g'),\n    CPStringRegexTrimWhitespace = new RegExp(\"(^\\\\s+|\\\\s+$)\", 'g');\n\n// @implementation CPString : CPObject\nvar $the_class = objj_allocateClassPair(CPObject, \"CPString\");\nobjj_registerClassPair($the_class);\n\nvar CPStringNull = /* CPNull null]; */ (CPNull == null ? null : CPNull.isa.objj_msgSend0(CPNull, \"null\"));\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (id)initWithString:\n    new objj_method(sel_getUid(\"initWithString:\"),\n    function $CPString__initWithString_(self, _cmd, aString)\n    {\n        if (/* self class]  */ self.isa.objj_msgSend0(self, \"class\") === CPString)\n            return new String(aString);\n\n        var result = new String(aString);\n\n        result.isa = /* self class]; */ self.isa.objj_msgSend0(self, \"class\");\n\n        return result;\n    },\n    // argument types\n    [\"id\", \"CPString\"]),\n\n    // - (CPString)description\n    new objj_method(sel_getUid(\"description\"),\n    function $CPString__description(self, _cmd)\n    {\n        return self;\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (int)length\n    new objj_method(sel_getUid(\"length\"),\n    function $CPString__length(self, _cmd)\n    {\n        return self.length;\n    },\n    // argument types\n    [\"int\"]),\n\n    // - (CPString)characterAtIndex:\n    new objj_method(sel_getUid(\"characterAtIndex:\"),\n    function $CPString__characterAtIndex_(self, _cmd, anIndex)\n    {\n        return self.charAt(anIndex);\n    },\n    // argument types\n    [\"CPString\", \"CPUInteger\"]),\n\n    // - (CPString)stringByAppendingString:\n    new objj_method(sel_getUid(\"stringByAppendingString:\"),\n    function $CPString__stringByAppendingString_(self, _cmd, aString)\n    {\n        return self + aString;\n    },\n    // argument types\n    [\"CPString\", \"CPString\"]),\n\n    // - (CPArray)componentsSeparatedByString:\n    new objj_method(sel_getUid(\"componentsSeparatedByString:\"),\n    function $CPString__componentsSeparatedByString_(self, _cmd, aString)\n    {\n        return self.split(aString);\n    },\n    // argument types\n    [\"CPArray\", \"CPString\"]),\n\n    // - (CPString)substringFromIndex:\n    new objj_method(sel_getUid(\"substringFromIndex:\"),\n    function $CPString__substringFromIndex_(self, _cmd, anIndex)\n    {\n        return self.substr(anIndex);\n    },\n    // argument types\n    [\"CPString\", \"unsigned\"]),\n\n    // - (CPString)substringWithRange:\n    new objj_method(sel_getUid(\"substringWithRange:\"),\n    function $CPString__substringWithRange_(self, _cmd, aRange)\n    {\n        if (aRange.location < 0 || CPMaxRange(aRange) > self.length)\n            throw new Error(\"aRange out of bounds\");\n\n        return self.substr(aRange.location, aRange.length);\n    },\n    // argument types\n    [\"CPString\", \"CPRange\"]),\n\n    // - (CPString)substringToIndex:\n    new objj_method(sel_getUid(\"substringToIndex:\"),\n    function $CPString__substringToIndex_(self, _cmd, anIndex)\n    {\n        if (anIndex > self.length)\n            throw new Error(\"index out of bounds\");\n\n        return self.substring(0, anIndex);\n    },\n    // argument types\n    [\"CPString\", \"unsigned\"]),\n\n    // - (CPRange)rangeOfString:\n    new objj_method(sel_getUid(\"rangeOfString:\"),\n    function $CPString__rangeOfString_(self, _cmd, aString)\n    {\n        return /* self rangeOfString: aString options: 0]; */ self.isa.objj_msgSend2(self, \"rangeOfString:options:\", aString, 0);\n    },\n    // argument types\n    [\"CPRange\", \"CPString\"]),\n\n    // - (CPRange)rangeOfString:options:\n    new objj_method(sel_getUid(\"rangeOfString:options:\"),\n    function $CPString__rangeOfString_options_(self, _cmd, aString, aMask)\n    {\n        return /* self rangeOfString: aString options: aMask range: nil]; */ self.isa.objj_msgSend3(self, \"rangeOfString:options:range:\", aString, aMask, nil);\n    },\n    // argument types\n    [\"CPRange\", \"CPString\", \"int\"]),\n\n    // - (CPRange)rangeOfString:options:range:\n    new objj_method(sel_getUid(\"rangeOfString:options:range:\"),\n    function $CPString__rangeOfString_options_range_(self, _cmd, aString, aMask, aRange)\n    {\n        if (!aString)\n            return CPMakeRange(CPNotFound, 0);\n\n        var string = aRange == nil ? self : /* self substringWithRange: aRange], */ self.isa.objj_msgSend1(self, \"substringWithRange:\", aRange),\n            location = CPNotFound;\n\n        if (aMask & CPCaseInsensitiveSearch)\n        {\n            string = string.toLowerCase();\n            aString = aString.toLowerCase();\n        }\n\n        if (aMask & CPDiacriticInsensitiveSearch)\n        {\n            string = string.stripDiacritics();\n            aString = aString.stripDiacritics();\n        }\n\n        if (aMask & CPBackwardsSearch)\n        {\n            location = string.lastIndexOf(aString);\n\n            if (aMask & CPAnchoredSearch && location + aString.length != string.length)\n                location = CPNotFound;\n        }\n        else if (aMask & CPAnchoredSearch)\n            location = (string.substr(0, aString.length)).indexOf(aString) != CPNotFound ? 0 : CPNotFound;\n        else\n            location = string.indexOf(aString);\n\n        if (location == CPNotFound)\n            return CPMakeRange(CPNotFound, 0);\n\n        return CPMakeRange(location + (aRange ? aRange.location : 0), aString.length);\n    },\n    // argument types\n    [\"CPRange\", \"CPString\", \"int\", \"CPrange\"]),\n\n    // - (CPString)stringByEscapingRegexControlCharacters\n    new objj_method(sel_getUid(\"stringByEscapingRegexControlCharacters\"),\n    function $CPString__stringByEscapingRegexControlCharacters(self, _cmd)\n    {\n        return self.replace(CPStringRegexEscapeExpression, \"\\\\$1\");\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPString)stringByReplacingOccurrencesOfString:withString:\n    new objj_method(sel_getUid(\"stringByReplacingOccurrencesOfString:withString:\"),\n    function $CPString__stringByReplacingOccurrencesOfString_withString_(self, _cmd, target, replacement)\n    {\n        return self.replace(new RegExp(/* target stringByEscapingRegexControlCharacters], */ (target == null ? null : target.isa.objj_msgSend0(target, \"stringByEscapingRegexControlCharacters\")), \"g\"), replacement);\n    },\n    // argument types\n    [\"CPString\", \"CPString\", \"CPString\"]),\n\n    // - (CPString)stringByReplacingOccurrencesOfString:withString:options:range:\n    new objj_method(sel_getUid(\"stringByReplacingOccurrencesOfString:withString:options:range:\"),\n    function $CPString__stringByReplacingOccurrencesOfString_withString_options_range_(self, _cmd, target, replacement, options, searchRange)\n    {\n        var start = self.substring(0, searchRange.location),\n            stringSegmentToSearch = self.substr(searchRange.location, searchRange.length),\n            end = self.substring(searchRange.location + searchRange.length, self.length),\n            target = /* target stringByEscapingRegexControlCharacters], */ (target == null ? null : target.isa.objj_msgSend0(target, \"stringByEscapingRegexControlCharacters\")),\n            regExp;\n\n        if (options & CPCaseInsensitiveSearch)\n            regExp = new RegExp(target, \"gi\");\n        else\n            regExp = new RegExp(target, \"g\");\n\n        return start + '' + stringSegmentToSearch.replace(regExp, replacement) + '' + end;\n    },\n    // argument types\n    [\"CPString\", \"CPString\", \"CPString\", \"int\", \"CPRange\"]),\n\n    // - (CPString)stringByReplacingCharactersInRange:withString:\n    new objj_method(sel_getUid(\"stringByReplacingCharactersInRange:withString:\"),\n    function $CPString__stringByReplacingCharactersInRange_withString_(self, _cmd, range, replacement)\n    {\n        return '' + self.substring(0, range.location) + replacement + self.substring(range.location + range.length, self.length);\n    },\n    // argument types\n    [\"CPString\", \"CPRange\", \"CPString\"]),\n\n    // - (CPString)stringByTrimmingWhitespace\n    new objj_method(sel_getUid(\"stringByTrimmingWhitespace\"),\n    function $CPString__stringByTrimmingWhitespace(self, _cmd)\n    {\n        return self.replace(CPStringRegexTrimWhitespace, \"\");\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPComparisonResult)compare:\n    new objj_method(sel_getUid(\"compare:\"),\n    function $CPString__compare_(self, _cmd, aString)\n    {\n        return /* self compare: aString options: nil]; */ self.isa.objj_msgSend2(self, \"compare:options:\", aString, nil);\n    },\n    // argument types\n    [\"CPComparisonResult\", \"CPString\"]),\n\n    // - (CPComparisonResult)caseInsensitiveCompare:\n    new objj_method(sel_getUid(\"caseInsensitiveCompare:\"),\n    function $CPString__caseInsensitiveCompare_(self, _cmd, aString)\n    {\n        return /* self compare: aString options: CPCaseInsensitiveSearch]; */ self.isa.objj_msgSend2(self, \"compare:options:\", aString, CPCaseInsensitiveSearch);\n    },\n    // argument types\n    [\"CPComparisonResult\", \"CPString\"]),\n\n    // - (CPComparisonResult)compare:options:\n    new objj_method(sel_getUid(\"compare:options:\"),\n    function $CPString__compare_options_(self, _cmd, aString, aMask)\n    {\n        if (aString == nil)\n            return CPOrderedDescending;\n\n        if (aString === CPStringNull)\n            throw new Error(\"compare: argument can't be 'CPNull'\");\n\n        var lhs = self,\n            rhs = aString;\n\n        if (aMask & CPCaseInsensitiveSearch)\n        {\n            lhs = lhs.toLowerCase();\n            rhs = rhs.toLowerCase();\n        }\n\n        if (aMask & CPDiacriticInsensitiveSearch)\n        {\n            lhs = lhs.stripDiacritics();\n            rhs = rhs.stripDiacritics();\n        }\n\n        if (lhs < rhs)\n            return CPOrderedAscending;\n\n        if (lhs > rhs)\n            return CPOrderedDescending;\n\n        return CPOrderedSame;\n    },\n    // argument types\n    [\"CPComparisonResult\", \"CPString\", \"int\"]),\n\n    // - (CPComparisonResult)compare:options:range:\n    new objj_method(sel_getUid(\"compare:options:range:\"),\n    function $CPString__compare_options_range_(self, _cmd, aString, aMask, range)\n    {\n        var lhs = /* self substringWithRange: range], */ self.isa.objj_msgSend1(self, \"substringWithRange:\", range),\n            rhs = aString;\n\n        return /* lhs compare: rhs options: aMask]; */ (lhs == null ? null : lhs.isa.objj_msgSend2(lhs, \"compare:options:\", rhs, aMask));\n    },\n    // argument types\n    [\"CPComparisonResult\", \"CPString\", \"int\", \"CPRange\"]),\n\n    // - (BOOL)hasPrefix:\n    new objj_method(sel_getUid(\"hasPrefix:\"),\n    function $CPString__hasPrefix_(self, _cmd, aString)\n    {\n        return aString && aString != \"\" && self.indexOf(aString) == 0;\n    },\n    // argument types\n    [\"BOOL\", \"CPString\"]),\n\n    // - (BOOL)hasSuffix:\n    new objj_method(sel_getUid(\"hasSuffix:\"),\n    function $CPString__hasSuffix_(self, _cmd, aString)\n    {\n        return aString && aString != \"\" && self.length >= aString.length && self.lastIndexOf(aString) == self.length - aString.length;\n    },\n    // argument types\n    [\"BOOL\", \"CPString\"]),\n\n    // - (BOOL)isEqual:\n    new objj_method(sel_getUid(\"isEqual:\"),\n    function $CPString__isEqual_(self, _cmd, anObject)\n    {\n        if (self === anObject)\n            return YES;\n\n        if (!anObject || !/* anObject isKindOfClass: [CPString class]]) */ (anObject == null ? null : anObject.isa.objj_msgSend1(anObject, \"isKindOfClass:\", CPString.isa.objj_msgSend0(CPString, \"class\"))))\n            return NO;\n\n        return /* self isEqualToString: anObject]; */ self.isa.objj_msgSend1(self, \"isEqualToString:\", anObject);\n    },\n    // argument types\n    [\"BOOL\", \"id\"]),\n\n    // - (BOOL)isEqualToString:\n    new objj_method(sel_getUid(\"isEqualToString:\"),\n    function $CPString__isEqualToString_(self, _cmd, aString)\n    {\n        return self == String(aString);\n    },\n    // argument types\n    [\"BOOL\", \"CPString\"]),\n\n    // - (CPString)UID\n    new objj_method(sel_getUid(\"UID\"),\n    function $CPString__UID(self, _cmd)\n    {\n        var UID = CPStringUIDs[self];\n\n        if (!UID)\n        {\n            UID = objj_generateObjectUID();\n            CPStringUIDs[self] = UID;\n        }\n\n        return UID + \"\";\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPString)capitalizedString\n    new objj_method(sel_getUid(\"capitalizedString\"),\n    function $CPString__capitalizedString(self, _cmd)\n    {\n        var parts = self.split(/\\b/g),\n            i = 0,\n            count = parts.length;\n\n        for (; i < count; i++)\n        {\n            if (i == 0 || /\\s$/.test(parts[i - 1]))\n                parts[i] = (parts[i].substring(0, 1)).toUpperCase() + (parts[i].substring(1)).toLowerCase();\n            else\n                parts[i] = parts[i].toLowerCase();\n        }\n\n        return parts.join(\"\");\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPString)lowercaseString\n    new objj_method(sel_getUid(\"lowercaseString\"),\n    function $CPString__lowercaseString(self, _cmd)\n    {\n        return self.toLowerCase();\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (CPString)uppercaseString\n    new objj_method(sel_getUid(\"uppercaseString\"),\n    function $CPString__uppercaseString(self, _cmd)\n    {\n        return self.toUpperCase();\n    },\n    // argument types\n    [\"CPString\"]),\n\n    // - (double)doubleValue\n    new objj_method(sel_getUid(\"doubleValue\"),\n    function $CPString__doubleValue(self, _cmd)\n    {\n        return parseFloat(self, 10);\n    },\n    // argument types\n    [\"double\"]),\n\n    // - (BOOL)boolValue\n    new objj_method(sel_getUid(\"boolValue\"),\n    function $CPString__boolValue(self, _cmd)\n    {\n        var replaceRegExp = new RegExp(\"^\\\\s*[\\\\+,\\\\-]?0*\");\n\n        return (RegExp(\"^[Y,y,t,T,1-9]\")).test(self.replace(replaceRegExp, ''));\n    },\n    // argument types\n    [\"BOOL\"]),\n\n    // - (int)intValue\n    new objj_method(sel_getUid(\"intValue\"),\n    function $CPString__intValue(self, _cmd)\n    {\n        return parseInt(self, 10);\n    },\n    // argument types\n    [\"int\"])\n]);\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (id)alloc\n    new objj_method(sel_getUid(\"alloc\"),\n    function $CPString__alloc(self, _cmd)\n    {\n        if (/* [self class] */ self.isa.objj_msgSend0(self, \"class\") !== CPString)\n            return /* [super alloc]; */ (_super == null ? null : _super.isa.objj_msgSend0(_super, \"alloc\"));\n\n        return new String();\n    },\n    // argument types\n    [\"id\"]),\n\n    // + (id)string\n    new objj_method(sel_getUid(\"string\"),\n    function $CPString__string(self, _cmd)\n    {\n        return /* [self alloc] init]; */ ((___r1 = self.isa.objj_msgSend0(self, \"alloc\")), ___r1 == null ? null : ___r1.isa.objj_msgSend0(___r1, \"init\"));\n\n        // Generated receiver temp variables\n        var ___r1;\n    },\n    // argument types\n    [\"id\"]),\n\n    // + (id)stringWithHash:\n    new objj_method(sel_getUid(\"stringWithHash:\"),\n    function $CPString__stringWithHash_(self, _cmd, aHash)\n    {\n        var hashString = (parseInt(aHash, 10)).toString(16);\n\n        return \"000000\".substring(0, MAX(6 - hashString.length, 0)) + hashString;\n    },\n    // argument types\n    [\"id\", \"unsigned\"])\n]);\n// @end: @implementation CPString : CPObject\n\n// @implementation CPString (JSON)\nvar $the_class = objj_getClass(\"CPString\");\n\nif (!$the_class)\n    throw new ReferenceError(\"Cannot find declaration for class 'CPString'\");\n\n\n// Instance methods\nclass_addMethods($the_class,\n[\n    // - (JSObject)objectFromJSON\n    new objj_method(sel_getUid(\"objectFromJSON\"),\n    function $CPString__objectFromJSON(self, _cmd)\n    {\n        return JSON.parse(self);\n    },\n    // argument types\n    [\"JSObject\"])\n]);\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (CPString)JSONFromObject:\n    new objj_method(sel_getUid(\"JSONFromObject:\"),\n    function $CPString__JSONFromObject_(self, _cmd, anObject)\n    {\n        return JSON.stringify(anObject);\n    },\n    // argument types\n    [\"CPString\", \"JSObject\"])\n]);\n// @end: @implementation CPString (JSON)\n\n// @implementation CPString (UUID)\nvar $the_class = objj_getClass(\"CPString\");\n\nif (!$the_class)\n    throw new ReferenceError(\"Cannot find declaration for class 'CPString'\");\n\n\n// Class methods\nclass_addMethods($the_class.isa,\n[\n    // + (CPString)UUID\n    new objj_method(sel_getUid(\"UUID\"),\n    function $CPString__UUID(self, _cmd)\n    {\n        var g = \"\",\n            i = 0;\n\n        for (; i < 32; i++)\n            g += (FLOOR(RAND() * 0xF)).toString(0xF);\n\n        return g;\n    },\n    // argument types\n    [\"CPString\"])\n]);\n// @end: @implementation CPString (UUID)\n\nString.prototype.isa = CPString;\n","superclassRefs":[{"superclass":"CPObject","class":"CPString"}],"classDefs":["CPString","CPString+JSON","CPString+UUID"],"dependencies":["CPObject.j"]}